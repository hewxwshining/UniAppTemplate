{"version":3,"file":"user.js","sources":["store/modules/user.ts"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { ref } from 'vue';\r\nimport store, { useTabBarStoreHook } from '@/store';\r\nimport cache, { clearToken, getAccessToken, setAccessToken, setRefreshToken } from '@/utils/cache';\r\nimport { getWxOpenId, loginApi, userInfoApi, wxLoginFreeApi } from '@/api/auth';\r\nimport { APPID, CACHEKEY_OPENID, USERTYPE_DRIVER, USERTYPE_VENDOR } from '@/api/const';\r\nimport { msg } from '@/utils/base';\r\n\r\n// 用户信息接口\r\ninterface UserInfo {\r\n\tUserId ?: string;\r\n\tUserType ?: number;\r\n\tUserName ?: string;\r\n\tPerId ?: string;\r\n\tPerCn ?: string;\r\n\tPerName ?: string;\r\n\tPerPhotoPath ?: string;\r\n\tOrgId ?: string;\r\n\tBaseId ?: string;\r\n\tFirmInfoId ?: string;\r\n\tFirmName ?: string;\r\n\tCars ?: any[];\r\n\t[key : string] : any;\r\n}\r\n\r\nexport const useUserStore = defineStore('user', () => {\r\n\t// 登录状态\r\n\tconst isLogin = ref(false);\r\n\t// 用户信息\r\n\tconst userInfo = ref<UserInfo>({});\r\n\t// 初始化用户状态\r\n\tconst initUserState = () => {\r\n\t\tconst token = getAccessToken();\r\n\t\tif (token) {\r\n\t\t\tsetUserInfos();\r\n\t\t\tconst openid = cache.get(CACHEKEY_OPENID, '')\r\n\t\t\tif (openid == '') {\r\n\t\t\t\tuni.login({\r\n\t\t\t\t\tsuccess: async (resLogin) => {\r\n\t\t\t\t\t\tif (resLogin.errMsg == 'login:ok') {\r\n\t\t\t\t\t\t\tconst [err, res] = await getWxOpenId({ AppId: APPID, Code: resLogin?.code });\r\n\t\t\t\t\t\t\tif (res) {\r\n\t\t\t\t\t\t\t\tif (res.code === 100) {\r\n\t\t\t\t\t\t\t\t\tconst data = res.data;\r\n\t\t\t\t\t\t\t\t\tcacheopenid(data.openid)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmsg('授权失败');\r\n\t\t\t\t\t\t\tredirectToLogin();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// #ifndef MP-WEIXIN\r\n\t\t\tredirectToLogin();\r\n\t\t\t// #endif\r\n\t\t\t// #ifdef MP-WEIXIN\r\n\t\t\tloginWithWechat();\r\n\t\t\t// #endif\r\n\t\t}\r\n\t};\r\n\r\n\t// 设置用户信息\r\n\tconst setUserInfos = async () => {\r\n\t\tlet data = await getApiUserInfo();\r\n\t\tconsole.log('setUserInfos', data);\r\n\t\tif (data) {\r\n\t\t\tisLogin.value = true;\r\n\t\t\tuserInfo.value = data as UserInfo;\r\n\t\t\t// 设置导航栏\r\n\t\t\tuseTabBarStoreHook().setTabBarList(data?.UserType);\r\n\t\t} else {\r\n\t\t\t// #ifndef MP-WEIXIN\r\n\t\t\tredirectToLogin();\r\n\t\t\t// #endif\r\n\t\t\t// #ifdef MP-WEIXIN\r\n\t\t\tloginWithWechat();\r\n\t\t\t// #endif\r\n\t\t}\r\n\t};\r\n\r\n\t// 清除用户信息\r\n\tconst clearUserInfo = () => {\r\n\t\tuserInfo.value = {};\r\n\t\tisLogin.value = false;\r\n\t\tclearToken();\r\n\t};\r\n\r\n\t// 检查登录状态\r\n\tconst checkLoginStatus = () : boolean => {\r\n\t\tlet accessToken = getAccessToken();\r\n\t\treturn isLogin.value && !!accessToken;\r\n\t};\r\n\t// 获取用户信息\r\n\tconst getUserInfo = () : UserInfo => {\r\n\t\treturn userInfo.value;\r\n\t};\r\n\t// 获取当前用户信息\r\n\tconst getApiUserInfo = async () => {\r\n\t\tconst [err, res] = await userInfoApi();\r\n\t\tif (err) return;\r\n\t\tif (res) {\r\n\t\t\tlet d = res.data.User;\r\n\t\t\tconst userInfos = {\r\n\t\t\t\tUserId: d.UserId,\r\n\t\t\t\tUserType: d.UserType,\r\n\t\t\t\tUserName: d.UserName,\r\n\t\t\t\tPerId: d.PerId,\r\n\t\t\t\tPerCn: d.PerCn,\r\n\t\t\t\tPerName: d.PerName,\r\n\t\t\t\tPerPhotoPath: d.PerPhotoPath,\r\n\t\t\t\tOrgId: d.OrgId,\r\n\t\t\t\tBaseId: d.BaseId,\r\n\t\t\t\tFirmInfoId: d.FirmInfoId,\r\n\t\t\t\tFirmName: d.FirmName,\r\n\t\t\t\tCars: d.Cars\r\n\t\t\t};\r\n\t\t\treturn userInfos;\r\n\t\t}\r\n\t};\r\n\tconst refreshUserInfo = async () => {\r\n\t\tif (!checkLoginStatus()) {\r\n\t\t\tconsole.log('用户未登录或者未初始化');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tsetUserInfos();\r\n\t};\r\n\t// 重定向到登录页面\r\n\tconst redirectToLogin = (redirectUrl ?: string) => {\r\n\t\tisLogin.value = false;\r\n\t\tuserInfo.value = {};\r\n\t\tconst currentPath = getCurrentPages().pop()?.route || '';\r\n\t\tconst targetPath = redirectUrl || `/${currentPath}`;\r\n\t\tconst pathUrl = targetPath !== '/pages/login/login' ? targetPath : '';\r\n\t\tuni.navigateTo({\r\n\t\t\turl: `/pages/login/login?redirect=${encodeURIComponent(pathUrl)}`\r\n\t\t});\r\n\t};\r\n\r\n\tconst userLogout = () => {\r\n\t\tisLogin.value = false;\r\n\t\tclearToken();\r\n\t\tredirectToLogin();\r\n\t};\r\n\tconst loginWithPassword = async (username : string, password : string, wxAppId : string, wxOpenid : string) : Promise<boolean> => {\r\n\t\tconst [error, result] = await loginApi({\r\n\t\t\tUserName: username,\r\n\t\t\tPassWord: password,\r\n\t\t\tWxAppId: wxAppId,\r\n\t\t\tWxOpenid: wxOpenid\r\n\t\t});\r\n\t\tif (error) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst { access_token, refresh_token, expires_in, token_type } = result?.data;\r\n\t\t// 保存token\r\n\t\tsetAccessToken(access_token);\r\n\t\tsetRefreshToken(refresh_token);\r\n\t\treturn true;\r\n\t};\r\n\t/**\r\n\t * 微信免密登陆\r\n\t */\r\n\tconst loginWithWechat = async () => {\r\n\t\tuni.login({\r\n\t\t\tsuccess: async (resLogin) => {\r\n\t\t\t\tif (resLogin.errMsg == 'login:ok') {\r\n\t\t\t\t\t//通过将code传给后端，后端拿到code后向微信服务发起请求，获取需要的 openId 与sessionKey，然后后端可以解密出用户信息，这里将token返回给前端\r\n\t\t\t\t\tconst [err, res] = await wxLoginFreeApi({ AppId: APPID, Code: resLogin?.code });\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tredirectToLogin();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (res) {\r\n\t\t\t\t\t\tif (res.code === 100) {\r\n\t\t\t\t\t\t\tconst { access_token, refresh_token, expires_in, token_type, openid } = res?.data;\r\n\t\t\t\t\t\t\tcacheopenid(openid)\r\n\t\t\t\t\t\t\t// 保存token\r\n\t\t\t\t\t\t\tsetAccessToken(access_token);\r\n\t\t\t\t\t\t\tsetRefreshToken(refresh_token);\r\n\r\n\t\t\t\t\t\t\t// 获取用户信息\r\n\t\t\t\t\t\t\tawait setUserInfos();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (userInfo.value.UserType == USERTYPE_DRIVER) {\r\n\t\t\t\t\t\t\t\t// 登录成功后跳转到首页\r\n\t\t\t\t\t\t\t\tuni.reLaunch({\r\n\t\t\t\t\t\t\t\t\turl: '/pages/driverSide/index/index'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (userInfo.value.UserType == USERTYPE_VENDOR) {\r\n\t\t\t\t\t\t\t\t// 登录成功后跳转到首页\r\n\t\t\t\t\t\t\t\tuni.reLaunch({\r\n\t\t\t\t\t\t\t\t\turl: '/pages/vendorSide/index/index'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (res.code === 728) {\r\n\t\t\t\t\t\t\tconst data = res.data;\r\n\t\t\t\t\t\t\tcacheopenid(data.openid)\r\n\t\t\t\t\t\t\tif (data.openid == '' || data.openid == null) {\r\n\t\t\t\t\t\t\t\t//授权出错：微信小程序openid为空\r\n\t\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\t\ttitle: '授权超时，请重新进入',\r\n\t\t\t\t\t\t\t\t\ticon: 'error',\r\n\t\t\t\t\t\t\t\t\tduration: 6000\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else if (data.AcOpenid == '' || data.AcOpenid == null) {\r\n\t\t\t\t\t\t\t\t//若提示“无法获取用户身份 登录的微信号未绑定为公众号的网页开发者，无法使用Oauth授权登录获取用户身份”，直接return，不要执行后续的代码逻辑（取消下一行代码的屏蔽）\r\n\t\t\t\t\t\t\t\t//return;\r\n\t\t\t\t\t\t\t\t//微信公众号openid为空，小程序openid授权正常，需要公众号静默授权逻辑\r\n\t\t\t\t\t\t\t\t//redirectToLogin();\r\n\t\t\t\t\t\t\t\tuni.navigateTo({\r\n\t\t\t\t\t\t\t\t\turl: `/pages/gzhauth/gzhauth?openid=${data.openid}&acid=${data.AcId}` //&acopenid=${data.AcOpenid}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (res.code === 727) {\r\n\t\t\t\t\t\t\tmsg('授权超时，请重新进入', {\r\n\t\t\t\t\t\t\t\ticon: 'none',\r\n\t\t\t\t\t\t\t\tduration: 2000\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmsg('授权失败');\r\n\t\t\t\t\tredirectToLogin();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * 12小时缓存小程序openid,考虑到解绑的时间点可能比较大\r\n\t */\r\n\tconst cacheopenid = (openid) => {\r\n\t\tif (!!openid)\r\n\t\t\tcache.put(CACHEKEY_OPENID, openid, 60 * 60 * 12)\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tisLogin,\r\n\t\tuserInfo,\r\n\t\tinitUserState,\r\n\t\tsetUserInfos,\r\n\t\tclearUserInfo,\r\n\t\tcheckLoginStatus,\r\n\t\tgetUserInfo,\r\n\t\trefreshUserInfo,\r\n\t\tuserLogout,\r\n\t\tloginWithPassword,\r\n\t\tloginWithWechat\r\n\t};\r\n});\r\n\r\nexport function useUserStoreHook() {\r\n\treturn useUserStore(store);\r\n}"],"names":["defineStore","ref","getAccessToken","cache","CACHEKEY_OPENID","uni","getWxOpenId","APPID","msg","useTabBarStoreHook","clearToken","userInfoApi","loginApi","setAccessToken","setRefreshToken","wxLoginFreeApi","USERTYPE_DRIVER","USERTYPE_VENDOR","store"],"mappings":"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"}