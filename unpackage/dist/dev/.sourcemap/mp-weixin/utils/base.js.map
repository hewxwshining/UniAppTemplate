{"version":3,"file":"base.js","sources":["utils/base.ts"],"sourcesContent":["/**\r\n * 工具函数集合\r\n */\r\n\r\nimport { ResData } from \"@/api/auth\"\r\nimport { CODE_NOARG, CODE_NOBINPER, CODE_NODATA } from \"@/api/const\"\r\n\r\n/**\r\n * 消息提示\r\n * @param title 提示内容\r\n * @param options 配置选项\r\n */\r\nexport function msg(title : string, options : any = {}) {\r\n\tconst defaultOptions = {\r\n\t\ticon: 'none',\r\n\t\tduration: 2000,\r\n\t\t...options\r\n\t}\r\n\tsetTimeout(() => {\r\n\t\tuni.showToast({\r\n\t\t\ttitle,\r\n\t\t\t...defaultOptions\r\n\t\t})\r\n\t}, 50)\r\n}\r\n\r\n/**\r\n * 消息提示（传入api返回的code，若满足）\r\n * @param title 提示内容\r\n * @param options 配置选项\r\n */\r\nexport function msgByCode(data : ResData, title : string, options : any = {}) {\r\n\tlet istip = true;\r\n\tif (data) {\r\n\t\tif (data.code == CODE_NODATA) {\r\n\t\t\tif (title == null || title.length == 0) {\r\n\t\t\t\tmsg('没有数据', options)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (data.code == CODE_NOARG) {\r\n\t\t\tistip = false;//底层已统一提示，这里跳过\r\n\t\t}\r\n\t\tif (data.code == CODE_NOBINPER) {\r\n\t\t\tistip = false;\r\n\t\t}\r\n\t}\r\n\tif (istip) {\r\n\t\tconst defaultOptions = {\r\n\t\t\ticon: 'none',\r\n\t\t\tduration: 2000,\r\n\t\t\t...options\r\n\t\t}\r\n\t\tsetTimeout(() => {\r\n\t\t\tuni.showToast({\r\n\t\t\t\ttitle,\r\n\t\t\t\t...defaultOptions\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t}\r\n}\r\n\r\n/**\r\n * 确认对话框\r\n * @param content 内容\r\n * @param title 标题\r\n * @returns Promise<boolean>\r\n */\r\nexport function confirm(content : string, title : string = '提示') : Promise<boolean> {\r\n\treturn new Promise((resolve) => {\r\n\t\tuni.showModal({\r\n\t\t\ttitle,\r\n\t\t\tcontent,\r\n\t\t\tsuccess: (res) => {\r\n\t\t\t\tresolve(res.confirm)\r\n\t\t\t},\r\n\t\t\tfail: () => {\r\n\t\t\t\tresolve(false)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\n/**\r\n * 加载提示\r\n * @param title 提示内容\r\n */\r\nexport function showLoading(title : string = '加载中...') {\r\n\tuni.showLoading({\r\n\t\ttitle,\r\n\t\tmask: true\r\n\t})\r\n}\r\n\r\n/**\r\n * 隐藏加载提示\r\n */\r\nexport function hideLoading() {\r\n\tuni.hideLoading()\r\n}\r\n\r\n/**\r\n * 获取当前页面路径\r\n * @returns string\r\n */\r\nexport function getCurrentPagePath() : string {\r\n\tconst pages = getCurrentPages()\r\n\tif (pages.length > 0) {\r\n\t\tconst currentPage = pages[pages.length - 1]\r\n\t\treturn `/${currentPage.route}`\r\n\t}\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * 格式化时间\r\n * @param date 日期\r\n * @param format 格式\r\n * @returns string\r\n */\r\nexport function formatDate(date : Date | string | number, format : string = 'YYYY-MM-DD HH:mm:ss') : string {\r\n\tif (typeof date == 'string') {\r\n\t\tdate = date.replace(/-/g, '/')\r\n\t}\r\n\tconst d = new Date(date)\r\n\tconst year = d.getFullYear()\r\n\tconst month = String(d.getMonth() + 1).padStart(2, '0')\r\n\tconst day = String(d.getDate()).padStart(2, '0')\r\n\tconst hours = String(d.getHours()).padStart(2, '0')\r\n\tconst minutes = String(d.getMinutes()).padStart(2, '0')\r\n\tconst seconds = String(d.getSeconds()).padStart(2, '0')\r\n\r\n\treturn format\r\n\t\t.replace('YYYY', String(year))\r\n\t\t.replace('MM', month)\r\n\t\t.replace('DD', day)\r\n\t\t.replace('HH', hours)\r\n\t\t.replace('mm', minutes)\r\n\t\t.replace('ss', seconds)\r\n}\r\n\r\n/**\r\n * 转字符串\r\n */\r\ninterface ShowStatus {\r\n\tvalue ?: number | string;\r\n\ttext ?: string;\r\n\tlabel ?: string;\r\n\tcolor ?: string;\r\n\tstatus ?: string;\r\n\t[key : string] : any; // 添加任意属性支持\r\n}\r\nexport const formatter = (\r\n\tvalue : any,\r\n\tlist : ShowStatus[],\r\n\tvalueKey : string = \"value\",\r\n\tlabelKey : string = \"text\"\r\n) : string => {\r\n\tif (!Array.isArray(list) || list.length === 0) {\r\n\t\treturn \"\"; // 如果列表为空或不是数组，直接返回空字符串\r\n\t}\r\n\tconst item = list.find((item) => item[valueKey] === value);\r\n\treturn item && item[labelKey] ? String(item[labelKey]) : \"\"; // 确保返回值为字符串\r\n};\r\n\r\n\r\n/**\r\n * 防抖函数\r\n * @param func 要防抖的函数\r\n * @param wait 等待时间\r\n * @returns Function\r\n */\r\nexport function debounce<T extends (...args : any[]) => any>(func : T, wait : number) : (...args : Parameters<T>) => void {\r\n\tlet timeout : number | null = null\r\n\r\n\treturn function (this : any, ...args : Parameters<T>) {\r\n\t\tif (timeout) {\r\n\t\t\tclearTimeout(timeout)\r\n\t\t}\r\n\r\n\t\ttimeout = setTimeout(() => {\r\n\t\t\tfunc.apply(this, args)\r\n\t\t}, wait)\r\n\t}\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * @param func 要节流的函数\r\n * @param wait 等待时间\r\n * @returns Function\r\n */\r\nexport function throttle<T extends (...args : any[]) => any>(func : T, wait : number) : (...args : Parameters<T>) => void {\r\n\tlet lastCall = 0\r\n\r\n\treturn function (this : any, ...args : Parameters<T>) {\r\n\t\tconst now = Date.now()\r\n\r\n\t\tif (now - lastCall >= wait) {\r\n\t\t\tlastCall = now\r\n\t\t\tfunc.apply(this, args)\r\n\t\t}\r\n\t}\r\n}"],"names":["uni"],"mappings":";;AAYO,SAAS,IAAI,OAAgB,UAAgB,IAAI;AACvD,QAAM,iBAAiB;AAAA,IACtB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,GAAG;AAAA,EAAA;AAEJ,aAAW,MAAM;AAChBA,kBAAAA,MAAI,UAAU;AAAA,MACb;AAAA,MACA,GAAG;AAAA,IAAA,CACH;AAAA,KACC,EAAE;AACN;;"}