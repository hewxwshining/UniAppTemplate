{"version":3,"file":"cache.js","sources":["utils/cache.ts"],"sourcesContent":["/**\r\n * 缓存数据优化\r\n * import cache from '@/utils/cache'\r\n * 使用方法 【\r\n *     一、设置缓存\r\n *         string    cache.put('k', 'string你好啊');\r\n *         json      cache.put('k', { \"b\": \"3\" }, 2);\r\n *         array     cache.put('k', [1, 2, 3]);\r\n *         boolean   cache.put('k', true);\r\n *     二、读取缓存\r\n *         默认值    cache.get('k')\r\n *         string    cache.get('k', '你好')\r\n *         json      cache.get('k', { \"a\": \"1\" })\r\n *     三、移除/清理\r\n *         移除: cache.remove('k');\r\n *         清理：cache.clear();\r\n * 】\r\n * @type {String}\r\n */\r\n// 访问 token 缓存的 key\r\nconst ACCESS_TOKEN_KEY = \"access_token\";\r\n// 刷新 token 缓存的 key\r\nconst REFRESH_TOKEN_KEY = \"refresh_token\";\r\n\r\nconst postfix : string = '_cashapp'; // 缓存后缀\r\n/**\r\n * 设置缓存\r\n * @param  {[type]} k [键名]\r\n * @param  {[type]} v [键值]\r\n * @param  {[type]} t [时间、单位秒]\r\n */\r\nfunction put(k : string, v : any, t = 0) {\r\n\tuni.setStorageSync(k, v)\r\n\tlet seconds = parseInt(t.toString());\r\n\tif (seconds > 0) {\r\n\t\tlet timestamp = Date.parse(new Date().toString());\r\n\t\ttimestamp = timestamp / 1000 + seconds;\r\n\t\tuni.setStorageSync(k + postfix, timestamp + \"\")\r\n\t} else {\r\n\t\tuni.removeStorageSync(k + postfix)\r\n\t}\r\n}\r\n\r\n/**\r\n * 获取缓存\r\n * @param  {[type]} k   [键名]\r\n * @param  {[type]} def [获取为空时默认]\r\n */\r\nfunction get(k : string, def : any = 0) {\r\n\tlet deadtime = parseInt(uni.getStorageSync(k + postfix))\r\n\tif (deadtime) {\r\n\t\tif (parseInt(deadtime.toString()) < Date.parse(new Date().toString()) / 1000) {\r\n\t\t\tif (def) {\r\n\t\t\t\treturn def;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tlet res = uni.getStorageSync(k);\r\n\tif (res) {\r\n\t\treturn res;\r\n\t} else {\r\n\t\tif (def === undefined || def === \"\") {\r\n\t\t\tdef = false;\r\n\t\t}\r\n\t\treturn def;\r\n\t}\r\n}\r\n\r\nfunction remove(k : string) {\r\n\tuni.removeStorageSync(k);\r\n\tuni.removeStorageSync(k + postfix);\r\n}\r\n\r\nfunction clear() {\r\n\tuni.clearStorageSync()\r\n}\r\n\r\n/**\r\n * 获取访问 token\r\n * @returns 访问 token\r\n */\r\nexport function getAccessToken() : string {\r\n\treturn get(ACCESS_TOKEN_KEY) || \"\";\r\n}\r\n/**\r\n * 设置访问 token\r\n * @param token 访问 token\r\n */\r\nexport function setAccessToken(token : string) {\r\n\tput(ACCESS_TOKEN_KEY, token);\r\n}\r\n\r\n\r\n/**\r\n * 获取刷新 token\r\n * @returns 刷新 token\r\n */\r\nexport function getRefreshToken() : string {\r\n\treturn get(REFRESH_TOKEN_KEY) || \"\";\r\n}\r\n/**\r\n * 设置刷新 token\r\n * @param token 刷新 token\r\n */\r\nexport function setRefreshToken(token : string) {\r\n\tput(REFRESH_TOKEN_KEY, token);\r\n}\r\n\r\n/**\r\n * 清除 token、清除刷新 token\r\n */\r\nexport function clearToken() {\r\n\tremove(ACCESS_TOKEN_KEY);\r\n\tremove(REFRESH_TOKEN_KEY);\r\n}\r\n\r\nexport default {\r\n\tput,\r\n\tget,\r\n\tremove,\r\n\tclear,\r\n\tgetAccessToken,\r\n\tsetAccessToken,\r\n\tgetRefreshToken,\r\n\tsetRefreshToken,\r\n\tclearToken\r\n}"],"names":["uni"],"mappings":";;AAoBA,MAAM,mBAAmB;AAEzB,MAAM,oBAAoB;AAE1B,MAAM,UAAmB;AAwBzB,SAAS,IAAI,GAAY,MAAY,GAAG;AACvC,MAAI,WAAW,SAASA,cAAA,MAAI,eAAe,IAAI,OAAO,CAAC;AACvD,MAAI,UAAU;AACb,QAAI,SAAS,SAAS,SAAS,CAAC,IAAI,KAAK,OAAM,oBAAI,KAAK,GAAE,SAAU,CAAA,IAAI,KAAM;AAC7E,UAAI,KAAK;AACD,eAAA;AAAA,MAAA,OACD;AACC,eAAA;AAAA,MACR;AAAA,IACD;AAAA,EACD;AACI,MAAA,MAAMA,cAAAA,MAAI,eAAe,CAAC;AAC9B,MAAI,KAAK;AACD,WAAA;AAAA,EAAA,OACD;AACF,QAAA,QAAQ,UAAa,QAAQ,IAAI;AAC9B,YAAA;AAAA,IACP;AACO,WAAA;AAAA,EACR;AACD;AAEA,SAAS,OAAO,GAAY;AAC3BA,sBAAI,kBAAkB,CAAC;AACnBA,gBAAAA,MAAA,kBAAkB,IAAI,OAAO;AAClC;AAUO,SAAS,iBAA0B;AAClC,SAAA,IAAI,gBAAgB,KAAK;AACjC;AA4BO,SAAS,aAAa;AAC5B,SAAO,gBAAgB;AACvB,SAAO,iBAAiB;AACzB;;;"}