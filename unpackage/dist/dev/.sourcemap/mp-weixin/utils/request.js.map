{"version":3,"file":"request.js","sources":["utils/request.ts"],"sourcesContent":["/// <reference types=\"@dcloudio/types\" />\r\nimport { msg } from '@/utils/base';\r\nimport { clearToken, getAccessToken } from './cache';\r\nimport { CODE_NOARG, CODE_NOBINPER, CODE_NODATA } from '@/api/const';\r\nimport { useUserStore } from '@/store';\r\n\r\n// 定义请求配置接口\r\nexport interface RequestOptions {\r\n\turl : string;\r\n\tmethod ?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n\tdata ?: any;\r\n\theader ?: Record<string, string>;\r\n\tloading ?: boolean;\r\n\tloadingText ?: string;\r\n}\r\n\r\n// 定义响应数据接口\r\nexport interface ResponseData<T = any> {\r\n\tbegtimestamp : string;\r\n\tcode : number;\r\n\tdata : T;\r\n\tendtimestamp : string;\r\n\t/** 可选：接口是否成功的标记 */\r\n\tmsg : string;\r\n}\r\n\r\n// 根据项目配置获取基础URL\r\nexport const getBaseUrl = () => {\r\n\treturn 'http://183.47.49.202:60040';\r\n\t// return 'http://localhost:9001';\r\n};\r\n\r\nlet isLoading = false;\r\n// 请求封装\r\nexport const request = <T = any>(options : RequestOptions) : Promise<ResponseData<T>> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// 显示加载中\r\n\t\tif (options.loading) {\r\n\t\t\tisLoading = true;\r\n\t\t\tuni.showLoading({\r\n\t\t\t\ttitle: options.loadingText || '加载中...',\r\n\t\t\t\tmask: true\r\n\t\t\t});\r\n\t\t}\r\n\t\t// 获取token\r\n\t\tconst token = getAccessToken();\r\n\r\n\t\t// 请求头\r\n\t\tconst header : Record<string, string> = {\r\n\t\t\t'content-type': 'application/json',\r\n\t\t\t...options.header\r\n\t\t};\r\n\t\t// 如果有token则添加到请求头\r\n\t\tif (token) {\r\n\t\t\theader['Authorization'] = `Bearer ${token}`;\r\n\t\t}\r\n\r\n\t\t// 获取基础URL\r\n\t\tconst baseUrl = getBaseUrl();\r\n\t\t// 发起请求\r\n\t\tuni.request({\r\n\t\t\turl: baseUrl + options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tdata: cleanObject(options.data),\r\n\t\t\ttimeout: 30000,\r\n\t\t\theader,\r\n\t\t\tsuccess: (res) => {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\t// 响应处理\r\n\t\t\t\tif (isLoading) {\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t\tisLoading = false;\r\n\t\t\t\t}\r\n\t\t\t\t// 处理响应\r\n\t\t\t\tif (res.statusCode === 200) {\r\n\t\t\t\t\tlet data = res.data as ResponseData;\r\n\t\t\t\t\tif (data.code === 100) {\r\n\t\t\t\t\t\tresolve(data as ResponseData);\r\n\t\t\t\t\t} else if (data.code === 401) {\r\n\t\t\t\t\t\tclearAccessAfterLogin();\r\n\t\t\t\t\t\tmsg(data.msg || '登录已过期，请重新登录');\r\n\t\t\t\t\t\treject(new Error('登录已过期，请重新登录'));\r\n\t\t\t\t\t} else if (data.code === 510) {\r\n\t\t\t\t\t\tmsg(data.msg || '登录失败，用户名或密码错误');\r\n\t\t\t\t\t\treject(new Error('登录失败，用户名或密码错误'));\r\n\t\t\t\t\t} else if (data.code === 611) {\r\n\t\t\t\t\t\tclearAccessAfterLogin();//data.msg:Token Error\r\n\t\t\t\t\t\tmsg('登录已过期，请重新登录');\r\n\t\t\t\t\t\treject(new Error('登录已过期，请重新登录'));\r\n\t\t\t\t\t} else if (data.code === 727 || data.code === 728) {\r\n\t\t\t\t\t\tresolve(data as ResponseData);\r\n\t\t\t\t\t} else if (data.code === CODE_NODATA) {\r\n\t\t\t\t\t\tresolve(data as ResponseData);\r\n\t\t\t\t\t} else if (data.code === CODE_NOARG) {\r\n\t\t\t\t\t\tconst tipNoArg = '参数错误';\r\n\t\t\t\t\t\tmsg(tipNoArg);\r\n\t\t\t\t\t\tresolve(data as ResponseData);\r\n\t\t\t\t\t} else if (data.code === CODE_NOBINPER) {\r\n\t\t\t\t\t\tconst tipNoBinPer = '账号未绑定人员';\r\n\t\t\t\t\t\tmsg(tipNoBinPer);\r\n\t\t\t\t\t\tresolve(data as ResponseData);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmsg(data.msg || '请求失败');\r\n\t\t\t\t\t\treject(new Error((res.data as ResponseData).msg || '请求失败'));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet statusCode = res.statusCode;\r\n\t\t\t\t\tconst commonErrors : Record<number, string> = {\r\n\t\t\t\t\t\t400: '请求参数错误',\r\n\t\t\t\t\t\t401: '未授权，请重新登录',\r\n\t\t\t\t\t\t403: '权限不足',\r\n\t\t\t\t\t\t404: '请求的资源不存在',\r\n\t\t\t\t\t\t408: '请求超时',\r\n\t\t\t\t\t\t500: '服务器内部错误',\r\n\t\t\t\t\t\t502: '网关错误',\r\n\t\t\t\t\t\t503: '服务暂不可用',\r\n\t\t\t\t\t\t504: '网关超时'\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst message = commonErrors[statusCode] || `请求失败（状态码：${statusCode}）`;\r\n\t\t\t\t\tmsg(message);\r\n\t\t\t\t\treject(new Error(message));\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t},\r\n\t\t\tfail: (err : UniApp.GeneralCallbackResult) => {\r\n\t\t\t\t// 请求失败处理\r\n\t\t\t\tif (isLoading) {\r\n\t\t\t\t\tisLoading = false;\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t}\r\n\t\t\t\t//msg(err.errMsg, { icon: 'error' });//一般是英文提示，取消弹框提示\r\n\t\t\t\treject(new Error(err.errMsg));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\n// 便捷方法\r\nexport const http = {\r\n\tget: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'GET',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tpost: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tput: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tdelete: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'DELETE',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const cleanObject = (obj : any) => {\r\n\tif (!obj) return obj;\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries(obj).filter(([_, value]) => {\r\n\t\t\t// 检查值是否为空\r\n\t\t\tif (value === null || value === undefined || value === '') return false;\r\n\t\t\t// 检查是否为空数组\r\n\t\t\tif (Array.isArray(value) && value.length === 0) return false;\r\n\t\t\t// 检查是否为空对象\r\n\t\t\tif (typeof value === 'object' && Object.keys(value).length === 0) return false;\r\n\t\t\treturn true;\r\n\t\t})\r\n\t);\r\n};\r\n\r\ninterface RequestUploadOptions {\r\n\turl : string;\r\n\tmethod ?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n\theader ?: Record<string, string>;\r\n\tfilePath ?: any;\r\n\tname ?: any;\r\n\tformData ?: any;\r\n\tloading ?: boolean;\r\n\tloadingText ?: string;\r\n}\r\nexport const uploadFile = <T = any>(options : RequestUploadOptions) : Promise<T> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// 显示加载中\r\n\r\n\t\tif (options.loading !== false) {\r\n\t\t\tuni.showLoading({\r\n\t\t\t\ttitle: options.loadingText || '加载中...',\r\n\t\t\t\tmask: true\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 获取token\r\n\t\tconst token = getAccessToken();\r\n\t\t// 请求头\r\n\t\tconst header : Record<string, string> = {};\r\n\t\t// 如果有token则添加到请求头\r\n\t\tif (token) {\r\n\t\t\theader['Authorization'] = `Bearer ${token}`;\r\n\t\t}\r\n\r\n\t\t// 获取基础URL\r\n\t\tconst baseUrl = getBaseUrl();\r\n\r\n\t\t// 发起请求\r\n\t\tuni.uploadFile({\r\n\t\t\turl: baseUrl + options.url,\r\n\t\t\theader,\r\n\t\t\tfilePath: options.filePath,\r\n\t\t\tname: 'file',\r\n\t\t\tformData: options.formData,\r\n\t\t\tsuccess(uploadFileRes) {\r\n\t\t\t\tconsole.log(uploadFileRes);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\n// 清除 token\r\nexport const clearAccessAfterLogin = () => {\r\n\tclearToken();\r\n\tuni.navigateTo({\r\n\t\turl: '/pages/login/login'\r\n\t});\r\n};"],"names":["uni","getAccessToken","msg","CODE_NODATA","CODE_NOARG","CODE_NOBINPER","clearToken"],"mappings":"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"}