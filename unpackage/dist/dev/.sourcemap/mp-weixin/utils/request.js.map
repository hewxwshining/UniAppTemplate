{"version":3,"file":"request.js","sources":["utils/request.ts"],"sourcesContent":["/// <reference types=\"@dcloudio/types\" />\r\nimport { msg } from \"@/utils/base\";\r\nimport { clearToken, getAccessToken } from \"./cache\"\r\n\r\n\r\n// 定义请求配置接口\r\ninterface RequestOptions {\r\n\turl : string;\r\n\tmethod ?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n\tdata ?: any;\r\n\theader ?: Record<string, string>;\r\n\tloading ?: boolean;\r\n\tloadingText ?: string;\r\n}\r\n\r\n// 定义响应数据接口\r\ninterface ResponseData<T = any> {\r\n\tcode : number;\r\n\tmessage : string;\r\n\tresult : T;\r\n\t/** 可选：接口是否成功的标记 */\r\n\tsuccess ?: boolean;\r\n\t[key : string] : any;\r\n}\r\n\r\n// 获取项目配置\r\nconst getProjectConfig = () => {\r\n\r\n\r\n}\r\n\r\n// 根据项目配置获取基础URL\r\nexport const getBaseUrl = () => {\r\n\treturn 'https://abc.ycbayy.cn'\r\n}\r\n\r\n// 请求封装\r\nexport const request = <T = any>(options : RequestOptions) : Promise<T> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// 显示加载中\r\n\t\tif (options.loading !== false) {\r\n\t\t\tuni.showLoading({\r\n\t\t\t\ttitle: options.loadingText || '加载中...',\r\n\t\t\t\tmask: true\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 获取token\r\n\t\tconst token = getAccessToken()\r\n\t\t// 请求头\r\n\t\tconst header : Record<string, string> = {\r\n\t\t\t'content-type': 'application/json',\r\n\t\t\t...options.header\r\n\t\t};\r\n\t\t// 如果有token则添加到请求头\r\n\t\tif (token) {\r\n\t\t\theader['Authorization'] = `Bearer ${token}`;\r\n\t\t}\r\n\r\n\t\t// 获取基础URL\r\n\t\tconst baseUrl = getBaseUrl()\r\n\t\t// 发起请求\r\n\t\tuni.request({\r\n\t\t\turl: baseUrl + options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tdata: cleanObject(options.data),\r\n\t\t\theader,\r\n\t\t\tsuccess: (res) => {\r\n\t\t\t\tif (options.loading !== false) {\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t}\r\n\t\t\t\t// 处理响应\r\n\t\t\t\tif (res.statusCode === 200) {\r\n\t\t\t\t\tlet data = res.data as ResponseData;\r\n\t\t\t\t\tif (data.code === 200) {\r\n\t\t\t\t\t\tresolve(res.data as T);\r\n\t\t\t\t\t} else if (data.code === 401) {\r\n\t\t\t\t\t\tclearAccessAfterLogin()\r\n\t\t\t\t\t\tmsg(data.message || '请求失败')\r\n\t\t\t\t\t\treject(new Error('登录已过期，请重新登录'));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmsg(data.message || '请求失败')\r\n\t\t\t\t\t\treject(new Error((res.data as ResponseData).message || '请求失败'));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treject(new Error((res.data as ResponseData).message || '请求失败'));\r\n\t\t\t\t}\r\n\t\t\t\treturn res\r\n\t\t\t},\r\n\t\t\tfail: (err : UniApp.GeneralCallbackResult) => {\r\n\t\t\t\tif (options.loading != false) {\r\n\t\t\t\t\tuni.hideLoading();\r\n\t\t\t\t}\r\n\t\t\t\treject(new Error(err.errMsg || '网络请求失败'));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\n// 便捷方法\r\nexport const http = {\r\n\tget: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'GET',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tpost: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tput: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t},\r\n\r\n\tdelete: <T = any>(url : string, data ?: any, options ?: Partial<RequestOptions>) => {\r\n\t\treturn request<T>({\r\n\t\t\turl,\r\n\t\t\tmethod: 'DELETE',\r\n\t\t\tdata,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\nexport const cleanObject = (obj : any) => {\r\n\tif (!obj) return obj\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries(obj).filter(([_, value]) => {\r\n\t\t\t// 检查值是否为空\r\n\t\t\tif (value === null || value === undefined || value === '') return false;\r\n\t\t\t// 检查是否为空数组\r\n\t\t\tif (Array.isArray(value) && value.length === 0) return false;\r\n\t\t\t// 检查是否为空对象\r\n\t\t\tif (typeof value === 'object' && Object.keys(value).length === 0) return false;\r\n\t\t\treturn true;\r\n\t\t})\r\n\t);\r\n};\r\n\r\ninterface RequestUploadOptions {\r\n\turl : string;\r\n\tmethod ?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n\theader ?: Record<string, string>;\r\n\tfilePath ?: any;\r\n\tname ?: any;\r\n\tformData ?: any;\r\n\tloading ?: boolean;\r\n\tloadingText ?: string;\r\n}\r\nexport const uploadFile = <T = any>(options : RequestUploadOptions) : Promise<T> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// 显示加载中\r\n\r\n\t\tif (options.loading !== false) {\r\n\t\t\tuni.showLoading({\r\n\t\t\t\ttitle: options.loadingText || '加载中...',\r\n\t\t\t\tmask: true\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// 获取token\r\n\t\tconst token = getAccessToken();\r\n\t\t// 请求头\r\n\t\tconst header : Record<string, string> = {};\r\n\t\t// 如果有token则添加到请求头\r\n\t\tif (token) {\r\n\t\t\theader['Authorization'] = `Bearer ${token}`;\r\n\t\t}\r\n\r\n\t\t// 获取基础URL\r\n\t\tconst baseUrl = getBaseUrl()\r\n\r\n\t\t// 发起请求\r\n\t\tuni.uploadFile({\r\n\t\t\turl: baseUrl + options.url,\r\n\t\t\theader,\r\n\t\t\tfilePath: options.filePath,\r\n\t\t\tname: 'file',\r\n\t\t\tformData: options.formData,\r\n\t\t\tsuccess(uploadFileRes) {\r\n\t\t\t\tconsole.log(uploadFileRes)\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t});\r\n};\r\n\r\n\r\n// 清除 token\r\nexport const clearAccessAfterLogin = () => {\r\n\tclearToken();\r\n\tuni.navigateTo({\r\n\t\turl: '/pages/auth/login/login'\r\n\t});\r\n};"],"names":["uni","getAccessToken","msg","clearToken"],"mappings":"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"}